//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types')
var Common_ttypes = require('./Common_types')
var Authentication_ttypes = require('./Authentication_types')
var Authorization_ttypes = require('../rpc/Authorization_types')


var ttypes = module.exports = {};
ttypes.DataType = {
  'BOOL' : 1,
  'INT8' : 2,
  'INT16' : 3,
  'INT32' : 4,
  'INT64' : 5,
  'FLOAT' : 6,
  'DOUBLE' : 7,
  'STRING' : 8,
  'BINARY' : 9,
  'RAWBINARY' : 10,
  'BOOL_SET' : 100,
  'INT8_SET' : 101,
  'INT16_SET' : 102,
  'INT32_SET' : 103,
  'INT64_SET' : 104,
  'FLOAT_SET' : 105,
  'DOUBLE_SET' : 106,
  'STRING_SET' : 107,
  'BINARY_SET' : 108
};
ttypes.OperatorType = {
  'EQUAL' : 1,
  'NOT_EQUAL' : 2,
  'GREATER' : 3,
  'GREATER_OR_EQUAL' : 4,
  'LESS' : 5,
  'LESS_OR_EQUAL' : 6
};
ttypes.SecondaryIndexConsistencyMode = {
  'LAZY' : 0,
  'EAGER' : 1,
  'IMMUTABLE' : 2
};
ttypes.CannedAcl = {
  'APP_SECRET_READ' : 1,
  'APP_SECRET_WRITE' : 2,
  'APP_USER_ENTITY_GROUP_READ' : 3,
  'APP_USER_ENTITY_GROUP_WRITE' : 4,
  'APP_USER_READ' : 5,
  'APP_USER_WRITE' : 6,
  'PUBLIC_READ' : 7,
  'PUBLIC_WRITE' : 8
};
ttypes.Permission = {
  'READ' : 1,
  'WRITE' : 2,
  'ADMIN' : 3
};
ttypes.StreamViewType = {
  'RECORD_IMAGE' : 1,
  'MUTATE_LOG' : 2
};
ttypes.TableState = {
  'CREATING' : 1,
  'ENABLING' : 2,
  'ENABLED' : 3,
  'DISABLING' : 4,
  'DISABLED' : 5,
  'DELETING' : 6,
  'DELETED' : 7,
  'LAZY_DELETE' : 8,
  'RENAMING' : 9
};
ttypes.SnapshotState = {
  'ENABLED' : 1,
  'INPROGRESS' : 2
};
ttypes.ScanOp = {
  'COUNT' : 0,
  'DELETE' : 1,
  'UPDATE' : 2
};
ttypes.BatchOp = {
  'GET' : 1,
  'PUT' : 2,
  'INCREMENT' : 3,
  'REMOVE' : 4
};
ttypes.MutationType = {
  'PUT' : 1,
  'DELETE' : 2,
  'INCREMENT' : 3
};
Value = module.exports.Value = function(args) {
  this.boolValue = null;
  this.int8Value = null;
  this.int16Value = null;
  this.int32Value = null;
  this.int64Value = null;
  this.doubleValue = null;
  this.stringValue = null;
  this.binaryValue = null;
  this.boolSetValue = null;
  this.int8SetValue = null;
  this.int16SetValue = null;
  this.int32SetValue = null;
  this.int64SetValue = null;
  this.doubleSetValue = null;
  this.stringSetValue = null;
  this.binarySetValue = null;
  this.nullValue = null;
  if (args) {
    if (args.boolValue !== undefined) {
      this.boolValue = args.boolValue;
    }
    if (args.int8Value !== undefined) {
      this.int8Value = args.int8Value;
    }
    if (args.int16Value !== undefined) {
      this.int16Value = args.int16Value;
    }
    if (args.int32Value !== undefined) {
      this.int32Value = args.int32Value;
    }
    if (args.int64Value !== undefined) {
      this.int64Value = args.int64Value;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.boolSetValue !== undefined) {
      this.boolSetValue = args.boolSetValue;
    }
    if (args.int8SetValue !== undefined) {
      this.int8SetValue = args.int8SetValue;
    }
    if (args.int16SetValue !== undefined) {
      this.int16SetValue = args.int16SetValue;
    }
    if (args.int32SetValue !== undefined) {
      this.int32SetValue = args.int32SetValue;
    }
    if (args.int64SetValue !== undefined) {
      this.int64SetValue = args.int64SetValue;
    }
    if (args.doubleSetValue !== undefined) {
      this.doubleSetValue = args.doubleSetValue;
    }
    if (args.stringSetValue !== undefined) {
      this.stringSetValue = args.stringSetValue;
    }
    if (args.binarySetValue !== undefined) {
      this.binarySetValue = args.binarySetValue;
    }
    if (args.nullValue !== undefined) {
      this.nullValue = args.nullValue;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.int8Value = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.int16Value = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.int32Value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.int64Value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.boolSetValue = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBool();
          this.boolSetValue.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.int8SetValue = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readByte();
          this.int8SetValue.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.int16SetValue = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI16();
          this.int16SetValue.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.int32SetValue = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32();
          this.int32SetValue.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.int64SetValue = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readI64();
          this.int64SetValue.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.doubleSetValue = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readDouble();
          this.doubleSetValue.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.stringSetValue = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.stringSetValue.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.binarySetValue = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readBinary();
          this.binarySetValue.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.nullValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.boolValue !== null && this.boolValue !== undefined) {
    output.writeFieldBegin('boolValue', Thrift.Type.BOOL, 1);
    output.writeBool(this.boolValue);
    output.writeFieldEnd();
  }
  if (this.int8Value !== null && this.int8Value !== undefined) {
    output.writeFieldBegin('int8Value', Thrift.Type.BYTE, 2);
    output.writeByte(this.int8Value);
    output.writeFieldEnd();
  }
  if (this.int16Value !== null && this.int16Value !== undefined) {
    output.writeFieldBegin('int16Value', Thrift.Type.I16, 3);
    output.writeI16(this.int16Value);
    output.writeFieldEnd();
  }
  if (this.int32Value !== null && this.int32Value !== undefined) {
    output.writeFieldBegin('int32Value', Thrift.Type.I32, 4);
    output.writeI32(this.int32Value);
    output.writeFieldEnd();
  }
  if (this.int64Value !== null && this.int64Value !== undefined) {
    output.writeFieldBegin('int64Value', Thrift.Type.I64, 5);
    output.writeI64(this.int64Value);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 7);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 8);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.boolSetValue !== null && this.boolSetValue !== undefined) {
    output.writeFieldBegin('boolSetValue', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.BOOL, this.boolSetValue.length);
    for (var iter56 in this.boolSetValue)
    {
      if (this.boolSetValue.hasOwnProperty(iter56))
      {
        iter56 = this.boolSetValue[iter56];
        output.writeBool(iter56);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int8SetValue !== null && this.int8SetValue !== undefined) {
    output.writeFieldBegin('int8SetValue', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.BYTE, this.int8SetValue.length);
    for (var iter57 in this.int8SetValue)
    {
      if (this.int8SetValue.hasOwnProperty(iter57))
      {
        iter57 = this.int8SetValue[iter57];
        output.writeByte(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int16SetValue !== null && this.int16SetValue !== undefined) {
    output.writeFieldBegin('int16SetValue', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I16, this.int16SetValue.length);
    for (var iter58 in this.int16SetValue)
    {
      if (this.int16SetValue.hasOwnProperty(iter58))
      {
        iter58 = this.int16SetValue[iter58];
        output.writeI16(iter58);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int32SetValue !== null && this.int32SetValue !== undefined) {
    output.writeFieldBegin('int32SetValue', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I32, this.int32SetValue.length);
    for (var iter59 in this.int32SetValue)
    {
      if (this.int32SetValue.hasOwnProperty(iter59))
      {
        iter59 = this.int32SetValue[iter59];
        output.writeI32(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int64SetValue !== null && this.int64SetValue !== undefined) {
    output.writeFieldBegin('int64SetValue', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.int64SetValue.length);
    for (var iter60 in this.int64SetValue)
    {
      if (this.int64SetValue.hasOwnProperty(iter60))
      {
        iter60 = this.int64SetValue[iter60];
        output.writeI64(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doubleSetValue !== null && this.doubleSetValue !== undefined) {
    output.writeFieldBegin('doubleSetValue', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.DOUBLE, this.doubleSetValue.length);
    for (var iter61 in this.doubleSetValue)
    {
      if (this.doubleSetValue.hasOwnProperty(iter61))
      {
        iter61 = this.doubleSetValue[iter61];
        output.writeDouble(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringSetValue !== null && this.stringSetValue !== undefined) {
    output.writeFieldBegin('stringSetValue', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.stringSetValue.length);
    for (var iter62 in this.stringSetValue)
    {
      if (this.stringSetValue.hasOwnProperty(iter62))
      {
        iter62 = this.stringSetValue[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binarySetValue !== null && this.binarySetValue !== undefined) {
    output.writeFieldBegin('binarySetValue', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.binarySetValue.length);
    for (var iter63 in this.binarySetValue)
    {
      if (this.binarySetValue.hasOwnProperty(iter63))
      {
        iter63 = this.binarySetValue[iter63];
        output.writeBinary(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nullValue !== null && this.nullValue !== undefined) {
    output.writeFieldBegin('nullValue', Thrift.Type.BOOL, 20);
    output.writeBool(this.nullValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Datum = module.exports.Datum = function(args) {
  this.type = null;
  this.value = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Datum.prototype = {};
Datum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.Value();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datum.prototype.write = function(output) {
  output.writeStructBegin('Datum');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionThroughput = module.exports.ProvisionThroughput = function(args) {
  this.readCapacity = null;
  this.writeCapacity = null;
  if (args) {
    if (args.readCapacity !== undefined) {
      this.readCapacity = args.readCapacity;
    }
    if (args.writeCapacity !== undefined) {
      this.writeCapacity = args.writeCapacity;
    }
  }
};
ProvisionThroughput.prototype = {};
ProvisionThroughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readCapacity = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.writeCapacity = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionThroughput.prototype.write = function(output) {
  output.writeStructBegin('ProvisionThroughput');
  if (this.readCapacity !== null && this.readCapacity !== undefined) {
    output.writeFieldBegin('readCapacity', Thrift.Type.I64, 1);
    output.writeI64(this.readCapacity);
    output.writeFieldEnd();
  }
  if (this.writeCapacity !== null && this.writeCapacity !== undefined) {
    output.writeFieldBegin('writeCapacity', Thrift.Type.I64, 2);
    output.writeI64(this.writeCapacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableQuota = module.exports.TableQuota = function(args) {
  this.size = null;
  if (args) {
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
TableQuota.prototype = {};
TableQuota.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableQuota.prototype.write = function(output) {
  output.writeStructBegin('TableQuota');
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 1);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeySpec = module.exports.KeySpec = function(args) {
  this.attribute = null;
  this.asc = true;
  if (args) {
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    }
    if (args.asc !== undefined) {
      this.asc = args.asc;
    }
  }
};
KeySpec.prototype = {};
KeySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.asc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeySpec.prototype.write = function(output) {
  output.writeStructBegin('KeySpec');
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 1);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.asc !== null && this.asc !== undefined) {
    output.writeFieldBegin('asc', Thrift.Type.BOOL, 2);
    output.writeBool(this.asc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocalSecondaryIndexSpec = module.exports.LocalSecondaryIndexSpec = function(args) {
  this.indexSchema = null;
  this.projections = null;
  this.consistencyMode = 0;
  this.unique = false;
  if (args) {
    if (args.indexSchema !== undefined) {
      this.indexSchema = args.indexSchema;
    }
    if (args.projections !== undefined) {
      this.projections = args.projections;
    }
    if (args.consistencyMode !== undefined) {
      this.consistencyMode = args.consistencyMode;
    }
    if (args.unique !== undefined) {
      this.unique = args.unique;
    }
  }
};
LocalSecondaryIndexSpec.prototype = {};
LocalSecondaryIndexSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.indexSchema = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.KeySpec();
          elem70.read(input);
          this.indexSchema.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.projections = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.projections.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistencyMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unique = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocalSecondaryIndexSpec.prototype.write = function(output) {
  output.writeStructBegin('LocalSecondaryIndexSpec');
  if (this.indexSchema !== null && this.indexSchema !== undefined) {
    output.writeFieldBegin('indexSchema', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.indexSchema.length);
    for (var iter78 in this.indexSchema)
    {
      if (this.indexSchema.hasOwnProperty(iter78))
      {
        iter78 = this.indexSchema[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.projections !== null && this.projections !== undefined) {
    output.writeFieldBegin('projections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.projections.length);
    for (var iter79 in this.projections)
    {
      if (this.projections.hasOwnProperty(iter79))
      {
        iter79 = this.projections[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.consistencyMode !== null && this.consistencyMode !== undefined) {
    output.writeFieldBegin('consistencyMode', Thrift.Type.I32, 3);
    output.writeI32(this.consistencyMode);
    output.writeFieldEnd();
  }
  if (this.unique !== null && this.unique !== undefined) {
    output.writeFieldBegin('unique', Thrift.Type.BOOL, 4);
    output.writeBool(this.unique);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityGroupSpec = module.exports.EntityGroupSpec = function(args) {
  this.attributes = null;
  this.enableHash = true;
  if (args) {
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.enableHash !== undefined) {
      this.enableHash = args.enableHash;
    }
  }
};
EntityGroupSpec.prototype = {};
EntityGroupSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.attributes = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.KeySpec();
          elem86.read(input);
          this.attributes.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enableHash = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityGroupSpec.prototype.write = function(output) {
  output.writeStructBegin('EntityGroupSpec');
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter87 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter87))
      {
        iter87 = this.attributes[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enableHash !== null && this.enableHash !== undefined) {
    output.writeFieldBegin('enableHash', Thrift.Type.BOOL, 2);
    output.writeBool(this.enableHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamSpec = module.exports.StreamSpec = function(args) {
  this.enableStream = null;
  this.viewType = null;
  this.attributes = null;
  if (args) {
    if (args.enableStream !== undefined) {
      this.enableStream = args.enableStream;
    }
    if (args.viewType !== undefined) {
      this.viewType = args.viewType;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
StreamSpec.prototype = {};
StreamSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enableStream = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.viewType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.attributes = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.attributes.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamSpec.prototype.write = function(output) {
  output.writeStructBegin('StreamSpec');
  if (this.enableStream !== null && this.enableStream !== undefined) {
    output.writeFieldBegin('enableStream', Thrift.Type.BOOL, 1);
    output.writeBool(this.enableStream);
    output.writeFieldEnd();
  }
  if (this.viewType !== null && this.viewType !== undefined) {
    output.writeFieldBegin('viewType', Thrift.Type.I32, 2);
    output.writeI32(this.viewType);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter95 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter95))
      {
        iter95 = this.attributes[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSchema = module.exports.TableSchema = function(args) {
  this.version = null;
  this.entityGroup = null;
  this.primaryIndex = null;
  this.secondaryIndexes = null;
  this.attributes = null;
  this.ttl = -1;
  this.preSplits = 1;
  this.streams = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.entityGroup !== undefined) {
      this.entityGroup = args.entityGroup;
    }
    if (args.primaryIndex !== undefined) {
      this.primaryIndex = args.primaryIndex;
    }
    if (args.secondaryIndexes !== undefined) {
      this.secondaryIndexes = args.secondaryIndexes;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.ttl !== undefined) {
      this.ttl = args.ttl;
    }
    if (args.preSplits !== undefined) {
      this.preSplits = args.preSplits;
    }
    if (args.streams !== undefined) {
      this.streams = args.streams;
    }
  }
};
TableSchema.prototype = {};
TableSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityGroup = new ttypes.EntityGroupSpec();
        this.entityGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.primaryIndex = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.KeySpec();
          elem102.read(input);
          this.primaryIndex.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size103 = 0;
        var _rtmp3107;
        this.secondaryIndexes = {};
        var _ktype104 = 0;
        var _vtype105 = 0;
        _rtmp3107 = input.readMapBegin();
        _ktype104 = _rtmp3107.ktype;
        _vtype105 = _rtmp3107.vtype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var key109 = null;
          var val110 = null;
          key109 = input.readString();
          val110 = new ttypes.LocalSecondaryIndexSpec();
          val110.read(input);
          this.secondaryIndexes[key109] = val110;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size111 = 0;
        var _rtmp3115;
        this.attributes = {};
        var _ktype112 = 0;
        var _vtype113 = 0;
        _rtmp3115 = input.readMapBegin();
        _ktype112 = _rtmp3115.ktype;
        _vtype113 = _rtmp3115.vtype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var key117 = null;
          var val118 = null;
          key117 = input.readString();
          val118 = input.readI32();
          this.attributes[key117] = val118;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.preSplits = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size119 = 0;
        var _rtmp3123;
        this.streams = {};
        var _ktype120 = 0;
        var _vtype121 = 0;
        _rtmp3123 = input.readMapBegin();
        _ktype120 = _rtmp3123.ktype;
        _vtype121 = _rtmp3123.vtype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var key125 = null;
          var val126 = null;
          key125 = input.readString();
          val126 = new ttypes.StreamSpec();
          val126.read(input);
          this.streams[key125] = val126;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSchema.prototype.write = function(output) {
  output.writeStructBegin('TableSchema');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.entityGroup !== null && this.entityGroup !== undefined) {
    output.writeFieldBegin('entityGroup', Thrift.Type.STRUCT, 2);
    this.entityGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.primaryIndex !== null && this.primaryIndex !== undefined) {
    output.writeFieldBegin('primaryIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryIndex.length);
    for (var iter127 in this.primaryIndex)
    {
      if (this.primaryIndex.hasOwnProperty(iter127))
      {
        iter127 = this.primaryIndex[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secondaryIndexes !== null && this.secondaryIndexes !== undefined) {
    output.writeFieldBegin('secondaryIndexes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.secondaryIndexes));
    for (var kiter128 in this.secondaryIndexes)
    {
      if (this.secondaryIndexes.hasOwnProperty(kiter128))
      {
        var viter129 = this.secondaryIndexes[kiter128];
        output.writeString(kiter128);
        viter129.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.attributes));
    for (var kiter130 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter130))
      {
        var viter131 = this.attributes[kiter130];
        output.writeString(kiter130);
        output.writeI32(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ttl !== null && this.ttl !== undefined) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 6);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  if (this.preSplits !== null && this.preSplits !== undefined) {
    output.writeFieldBegin('preSplits', Thrift.Type.I32, 7);
    output.writeI32(this.preSplits);
    output.writeFieldEnd();
  }
  if (this.streams !== null && this.streams !== undefined) {
    output.writeFieldBegin('streams', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.streams));
    for (var kiter132 in this.streams)
    {
      if (this.streams.hasOwnProperty(kiter132))
      {
        var viter133 = this.streams[kiter132];
        output.writeString(kiter132);
        viter133.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableMetadata = module.exports.TableMetadata = function(args) {
  this.tableId = null;
  this.developerId = null;
  this.appAcl = null;
  this.quota = null;
  this.throughput = null;
  this.description = null;
  this.stream = null;
  this.enableSysSnapshot = null;
  this.exceededThroughput = null;
  this.slaveThroughput = null;
  this.exceededSlaveThroughput = null;
  this.acl = null;
  this.spaceId = null;
  if (args) {
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    }
    if (args.appAcl !== undefined) {
      this.appAcl = args.appAcl;
    }
    if (args.quota !== undefined) {
      this.quota = args.quota;
    }
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
    if (args.enableSysSnapshot !== undefined) {
      this.enableSysSnapshot = args.enableSysSnapshot;
    }
    if (args.exceededThroughput !== undefined) {
      this.exceededThroughput = args.exceededThroughput;
    }
    if (args.slaveThroughput !== undefined) {
      this.slaveThroughput = args.slaveThroughput;
    }
    if (args.exceededSlaveThroughput !== undefined) {
      this.exceededSlaveThroughput = args.exceededSlaveThroughput;
    }
    if (args.acl !== undefined) {
      this.acl = args.acl;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
TableMetadata.prototype = {};
TableMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size134 = 0;
        var _rtmp3138;
        this.appAcl = {};
        var _ktype135 = 0;
        var _vtype136 = 0;
        _rtmp3138 = input.readMapBegin();
        _ktype135 = _rtmp3138.ktype;
        _vtype136 = _rtmp3138.vtype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var key140 = null;
          var val141 = null;
          key140 = input.readString();
          var _size142 = 0;
          var _rtmp3146;
          val141 = [];
          var _etype145 = 0;
          _rtmp3146 = input.readListBegin();
          _etype145 = _rtmp3146.etype;
          _size142 = _rtmp3146.size;
          for (var _i147 = 0; _i147 < _size142; ++_i147)
          {
            var elem148 = null;
            elem148 = input.readI32();
            val141.push(elem148);
          }
          input.readListEnd();
          this.appAcl[key140] = val141;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.quota = new ttypes.TableQuota();
        this.quota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ttypes.ProvisionThroughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.StreamSpec();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSysSnapshot = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededThroughput = new ttypes.ProvisionThroughput();
        this.exceededThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.slaveThroughput = new ttypes.ProvisionThroughput();
        this.slaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededSlaveThroughput = new ttypes.ProvisionThroughput();
        this.exceededSlaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size149 = 0;
        var _rtmp3153;
        this.acl = {};
        var _ktype150 = 0;
        var _vtype151 = 0;
        _rtmp3153 = input.readMapBegin();
        _ktype150 = _rtmp3153.ktype;
        _vtype151 = _rtmp3153.vtype;
        _size149 = _rtmp3153.size;
        for (var _i154 = 0; _i154 < _size149; ++_i154)
        {
          var key155 = null;
          var val156 = null;
          key155 = input.readString();
          var _size157 = 0;
          var _rtmp3161;
          val156 = [];
          var _etype160 = 0;
          _rtmp3161 = input.readListBegin();
          _etype160 = _rtmp3161.etype;
          _size157 = _rtmp3161.size;
          for (var _i162 = 0; _i162 < _size157; ++_i162)
          {
            var elem163 = null;
            elem163 = input.readI32();
            val156.push(elem163);
          }
          input.readListEnd();
          this.acl[key155] = val156;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableMetadata.prototype.write = function(output) {
  output.writeStructBegin('TableMetadata');
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 1);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.appAcl !== null && this.appAcl !== undefined) {
    output.writeFieldBegin('appAcl', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.appAcl));
    for (var kiter164 in this.appAcl)
    {
      if (this.appAcl.hasOwnProperty(kiter164))
      {
        var viter165 = this.appAcl[kiter164];
        output.writeString(kiter164);
        output.writeListBegin(Thrift.Type.I32, viter165.length);
        for (var iter166 in viter165)
        {
          if (viter165.hasOwnProperty(iter166))
          {
            iter166 = viter165[iter166];
            output.writeI32(iter166);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.quota !== null && this.quota !== undefined) {
    output.writeFieldBegin('quota', Thrift.Type.STRUCT, 4);
    this.quota.write(output);
    output.writeFieldEnd();
  }
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 5);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 7);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  if (this.enableSysSnapshot !== null && this.enableSysSnapshot !== undefined) {
    output.writeFieldBegin('enableSysSnapshot', Thrift.Type.BOOL, 8);
    output.writeBool(this.enableSysSnapshot);
    output.writeFieldEnd();
  }
  if (this.exceededThroughput !== null && this.exceededThroughput !== undefined) {
    output.writeFieldBegin('exceededThroughput', Thrift.Type.STRUCT, 9);
    this.exceededThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.slaveThroughput !== null && this.slaveThroughput !== undefined) {
    output.writeFieldBegin('slaveThroughput', Thrift.Type.STRUCT, 10);
    this.slaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.exceededSlaveThroughput !== null && this.exceededSlaveThroughput !== undefined) {
    output.writeFieldBegin('exceededSlaveThroughput', Thrift.Type.STRUCT, 11);
    this.exceededSlaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.acl !== null && this.acl !== undefined) {
    output.writeFieldBegin('acl', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.acl));
    for (var kiter167 in this.acl)
    {
      if (this.acl.hasOwnProperty(kiter167))
      {
        var viter168 = this.acl[kiter167];
        output.writeString(kiter167);
        output.writeListBegin(Thrift.Type.I32, viter168.length);
        for (var iter169 in viter168)
        {
          if (viter168.hasOwnProperty(iter169))
          {
            iter169 = viter168[iter169];
            output.writeI32(iter169);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 13);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSpec = module.exports.TableSpec = function(args) {
  this.schema = null;
  this.metadata = null;
  if (args) {
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
  }
};
TableSpec.prototype = {};
TableSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.TableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new ttypes.TableMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSpec.prototype.write = function(output) {
  output.writeStructBegin('TableSpec');
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 1);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStatus = module.exports.TableStatus = function(args) {
  this.state = null;
  this.createTime = null;
  this.alterTime = null;
  this.statTime = null;
  this.size = null;
  this.rowCount = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.alterTime !== undefined) {
      this.alterTime = args.alterTime;
    }
    if (args.statTime !== undefined) {
      this.statTime = args.statTime;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.rowCount !== undefined) {
      this.rowCount = args.rowCount;
    }
  }
};
TableStatus.prototype = {};
TableStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.alterTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.statTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatus.prototype.write = function(output) {
  output.writeStructBegin('TableStatus');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 2);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.alterTime !== null && this.alterTime !== undefined) {
    output.writeFieldBegin('alterTime', Thrift.Type.I64, 3);
    output.writeI64(this.alterTime);
    output.writeFieldEnd();
  }
  if (this.statTime !== null && this.statTime !== undefined) {
    output.writeFieldBegin('statTime', Thrift.Type.I64, 4);
    output.writeI64(this.statTime);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 5);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 6);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableInfo = module.exports.TableInfo = function(args) {
  this.name = null;
  this.spec = null;
  this.status = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
TableInfo.prototype = {};
TableInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TableSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TableStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableInfo.prototype.write = function(output) {
  output.writeStructBegin('TableInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleCondition = module.exports.SimpleCondition = function(args) {
  this.operator = null;
  this.field = null;
  this.value = null;
  this.rowExist = null;
  if (args) {
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.rowExist !== undefined) {
      this.rowExist = args.rowExist;
    }
  }
};
SimpleCondition.prototype = {};
SimpleCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.operator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.Datum();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.rowExist = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleCondition.prototype.write = function(output) {
  output.writeStructBegin('SimpleCondition');
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.I32, 1);
    output.writeI32(this.operator);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.rowExist !== null && this.rowExist !== undefined) {
    output.writeFieldBegin('rowExist', Thrift.Type.BOOL, 4);
    output.writeBool(this.rowExist);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSplit = module.exports.TableSplit = function(args) {
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
TableSplit.prototype = {};
TableSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size170 = 0;
        var _rtmp3174;
        this.startKey = {};
        var _ktype171 = 0;
        var _vtype172 = 0;
        _rtmp3174 = input.readMapBegin();
        _ktype171 = _rtmp3174.ktype;
        _vtype172 = _rtmp3174.vtype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var key176 = null;
          var val177 = null;
          key176 = input.readString();
          val177 = new ttypes.Datum();
          val177.read(input);
          this.startKey[key176] = val177;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size178 = 0;
        var _rtmp3182;
        this.stopKey = {};
        var _ktype179 = 0;
        var _vtype180 = 0;
        _rtmp3182 = input.readMapBegin();
        _ktype179 = _rtmp3182.ktype;
        _vtype180 = _rtmp3182.vtype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var key184 = null;
          var val185 = null;
          key184 = input.readString();
          val185 = new ttypes.Datum();
          val185.read(input);
          this.stopKey[key184] = val185;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSplit.prototype.write = function(output) {
  output.writeStructBegin('TableSplit');
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter186 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter186))
      {
        var viter187 = this.startKey[kiter186];
        output.writeString(kiter186);
        viter187.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter188 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter188))
      {
        var viter189 = this.stopKey[kiter188];
        output.writeString(kiter188);
        viter189.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRequest = module.exports.GetRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
GetRequest.prototype = {};
GetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size190 = 0;
        var _rtmp3194;
        this.keys = {};
        var _ktype191 = 0;
        var _vtype192 = 0;
        _rtmp3194 = input.readMapBegin();
        _ktype191 = _rtmp3194.ktype;
        _vtype192 = _rtmp3194.vtype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var key196 = null;
          var val197 = null;
          key196 = input.readString();
          val197 = new ttypes.Datum();
          val197.read(input);
          this.keys[key196] = val197;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.attributes = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = input.readString();
          this.attributes.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter205 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter205))
      {
        var viter206 = this.keys[kiter205];
        output.writeString(kiter205);
        viter206.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter207 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter207))
      {
        iter207 = this.attributes[iter207];
        output.writeString(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetResult = module.exports.GetResult = function(args) {
  this.item = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
  }
};
GetResult.prototype = {};
GetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size208 = 0;
        var _rtmp3212;
        this.item = {};
        var _ktype209 = 0;
        var _vtype210 = 0;
        _rtmp3212 = input.readMapBegin();
        _ktype209 = _rtmp3212.ktype;
        _vtype210 = _rtmp3212.vtype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var key214 = null;
          var val215 = null;
          key214 = input.readString();
          val215 = new ttypes.Datum();
          val215.read(input);
          this.item[key214] = val215;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResult.prototype.write = function(output) {
  output.writeStructBegin('GetResult');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.item));
    for (var kiter216 in this.item)
    {
      if (this.item.hasOwnProperty(kiter216))
      {
        var viter217 = this.item[kiter216];
        output.writeString(kiter216);
        viter217.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutRequest = module.exports.PutRequest = function(args) {
  this.tableName = null;
  this.record = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
PutRequest.prototype = {};
PutRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size218 = 0;
        var _rtmp3222;
        this.record = {};
        var _ktype219 = 0;
        var _vtype220 = 0;
        _rtmp3222 = input.readMapBegin();
        _ktype219 = _rtmp3222.ktype;
        _vtype220 = _rtmp3222.vtype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var key224 = null;
          var val225 = null;
          key224 = input.readString();
          val225 = new ttypes.Datum();
          val225.read(input);
          this.record[key224] = val225;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutRequest.prototype.write = function(output) {
  output.writeStructBegin('PutRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter226 in this.record)
    {
      if (this.record.hasOwnProperty(kiter226))
      {
        var viter227 = this.record[kiter226];
        output.writeString(kiter226);
        viter227.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 3);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutResult = module.exports.PutResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PutResult.prototype = {};
PutResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutResult.prototype.write = function(output) {
  output.writeStructBegin('PutResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementRequest = module.exports.IncrementRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.amounts = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementRequest.prototype = {};
IncrementRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size228 = 0;
        var _rtmp3232;
        this.keys = {};
        var _ktype229 = 0;
        var _vtype230 = 0;
        _rtmp3232 = input.readMapBegin();
        _ktype229 = _rtmp3232.ktype;
        _vtype230 = _rtmp3232.vtype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var key234 = null;
          var val235 = null;
          key234 = input.readString();
          val235 = new ttypes.Datum();
          val235.read(input);
          this.keys[key234] = val235;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size236 = 0;
        var _rtmp3240;
        this.amounts = {};
        var _ktype237 = 0;
        var _vtype238 = 0;
        _rtmp3240 = input.readMapBegin();
        _ktype237 = _rtmp3240.ktype;
        _vtype238 = _rtmp3240.vtype;
        _size236 = _rtmp3240.size;
        for (var _i241 = 0; _i241 < _size236; ++_i241)
        {
          var key242 = null;
          var val243 = null;
          key242 = input.readString();
          val243 = new ttypes.Datum();
          val243.read(input);
          this.amounts[key242] = val243;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementRequest.prototype.write = function(output) {
  output.writeStructBegin('IncrementRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter244 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter244))
      {
        var viter245 = this.keys[kiter244];
        output.writeString(kiter244);
        viter245.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter246 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter246))
      {
        var viter247 = this.amounts[kiter246];
        output.writeString(kiter246);
        viter247.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementResult = module.exports.IncrementResult = function(args) {
  this.amounts = null;
  if (args) {
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementResult.prototype = {};
IncrementResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size248 = 0;
        var _rtmp3252;
        this.amounts = {};
        var _ktype249 = 0;
        var _vtype250 = 0;
        _rtmp3252 = input.readMapBegin();
        _ktype249 = _rtmp3252.ktype;
        _vtype250 = _rtmp3252.vtype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var key254 = null;
          var val255 = null;
          key254 = input.readString();
          val255 = new ttypes.Datum();
          val255.read(input);
          this.amounts[key254] = val255;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementResult.prototype.write = function(output) {
  output.writeStructBegin('IncrementResult');
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter256 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter256))
      {
        var viter257 = this.amounts[kiter256];
        output.writeString(kiter256);
        viter257.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveRequest = module.exports.RemoveRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
RemoveRequest.prototype = {};
RemoveRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size258 = 0;
        var _rtmp3262;
        this.keys = {};
        var _ktype259 = 0;
        var _vtype260 = 0;
        _rtmp3262 = input.readMapBegin();
        _ktype259 = _rtmp3262.ktype;
        _vtype260 = _rtmp3262.vtype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var key264 = null;
          var val265 = null;
          key264 = input.readString();
          val265 = new ttypes.Datum();
          val265.read(input);
          this.keys[key264] = val265;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size266 = 0;
        var _rtmp3270;
        this.attributes = [];
        var _etype269 = 0;
        _rtmp3270 = input.readListBegin();
        _etype269 = _rtmp3270.etype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          var elem272 = null;
          elem272 = input.readString();
          this.attributes.push(elem272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter273 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter273))
      {
        var viter274 = this.keys[kiter273];
        output.writeString(kiter273);
        viter274.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter275 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter275))
      {
        iter275 = this.attributes[iter275];
        output.writeString(iter275);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 4);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveResult = module.exports.RemoveResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RemoveResult.prototype = {};
RemoveResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveResult.prototype.write = function(output) {
  output.writeStructBegin('RemoveResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Request = module.exports.Request = function(args) {
  this.getRequest = null;
  this.putRequest = null;
  this.incrementRequest = null;
  this.removeRequest = null;
  if (args) {
    if (args.getRequest !== undefined) {
      this.getRequest = args.getRequest;
    }
    if (args.putRequest !== undefined) {
      this.putRequest = args.putRequest;
    }
    if (args.incrementRequest !== undefined) {
      this.incrementRequest = args.incrementRequest;
    }
    if (args.removeRequest !== undefined) {
      this.removeRequest = args.removeRequest;
    }
  }
};
Request.prototype = {};
Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRequest = new ttypes.GetRequest();
        this.getRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putRequest = new ttypes.PutRequest();
        this.putRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementRequest = new ttypes.IncrementRequest();
        this.incrementRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeRequest = new ttypes.RemoveRequest();
        this.removeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Request.prototype.write = function(output) {
  output.writeStructBegin('Request');
  if (this.getRequest !== null && this.getRequest !== undefined) {
    output.writeFieldBegin('getRequest', Thrift.Type.STRUCT, 1);
    this.getRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.putRequest !== null && this.putRequest !== undefined) {
    output.writeFieldBegin('putRequest', Thrift.Type.STRUCT, 2);
    this.putRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementRequest !== null && this.incrementRequest !== undefined) {
    output.writeFieldBegin('incrementRequest', Thrift.Type.STRUCT, 3);
    this.incrementRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.removeRequest !== null && this.removeRequest !== undefined) {
    output.writeFieldBegin('removeRequest', Thrift.Type.STRUCT, 4);
    this.removeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanAction = module.exports.ScanAction = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ScanAction.prototype = {};
ScanAction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanAction.prototype.write = function(output) {
  output.writeStructBegin('ScanAction');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanRequest = module.exports.ScanRequest = function(args) {
  this.tableName = null;
  this.indexName = null;
  this.startKey = null;
  this.stopKey = null;
  this.attributes = null;
  this.condition = null;
  this.limit = 10;
  this.reverse = false;
  this.inGlobalOrder = true;
  this.cacheResult = true;
  this.lookAheadStep = 0;
  this.action = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.indexName !== undefined) {
      this.indexName = args.indexName;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
    if (args.reverse !== undefined) {
      this.reverse = args.reverse;
    }
    if (args.inGlobalOrder !== undefined) {
      this.inGlobalOrder = args.inGlobalOrder;
    }
    if (args.cacheResult !== undefined) {
      this.cacheResult = args.cacheResult;
    }
    if (args.lookAheadStep !== undefined) {
      this.lookAheadStep = args.lookAheadStep;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
  }
};
ScanRequest.prototype = {};
ScanRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size276 = 0;
        var _rtmp3280;
        this.startKey = {};
        var _ktype277 = 0;
        var _vtype278 = 0;
        _rtmp3280 = input.readMapBegin();
        _ktype277 = _rtmp3280.ktype;
        _vtype278 = _rtmp3280.vtype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var key282 = null;
          var val283 = null;
          key282 = input.readString();
          val283 = new ttypes.Datum();
          val283.read(input);
          this.startKey[key282] = val283;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size284 = 0;
        var _rtmp3288;
        this.stopKey = {};
        var _ktype285 = 0;
        var _vtype286 = 0;
        _rtmp3288 = input.readMapBegin();
        _ktype285 = _rtmp3288.ktype;
        _vtype286 = _rtmp3288.vtype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var key290 = null;
          var val291 = null;
          key290 = input.readString();
          val291 = new ttypes.Datum();
          val291.read(input);
          this.stopKey[key290] = val291;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.attributes = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = input.readString();
          this.attributes.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.condition = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.inGlobalOrder = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.lookAheadStep = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.action = new ttypes.ScanAction();
        this.action.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanRequest.prototype.write = function(output) {
  output.writeStructBegin('ScanRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 2);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter299 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter299))
      {
        var viter300 = this.startKey[kiter299];
        output.writeString(kiter299);
        viter300.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter301 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter301))
      {
        var viter302 = this.stopKey[kiter301];
        output.writeString(kiter301);
        viter302.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter303 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter303))
      {
        iter303 = this.attributes[iter303];
        output.writeString(iter303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRING, 6);
    output.writeString(this.condition);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 7);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 8);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  if (this.inGlobalOrder !== null && this.inGlobalOrder !== undefined) {
    output.writeFieldBegin('inGlobalOrder', Thrift.Type.BOOL, 9);
    output.writeBool(this.inGlobalOrder);
    output.writeFieldEnd();
  }
  if (this.cacheResult !== null && this.cacheResult !== undefined) {
    output.writeFieldBegin('cacheResult', Thrift.Type.BOOL, 10);
    output.writeBool(this.cacheResult);
    output.writeFieldEnd();
  }
  if (this.lookAheadStep !== null && this.lookAheadStep !== undefined) {
    output.writeFieldBegin('lookAheadStep', Thrift.Type.I32, 11);
    output.writeI32(this.lookAheadStep);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRUCT, 12);
    this.action.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = module.exports.ScanResult = function(args) {
  this.nextStartKey = null;
  this.records = null;
  this.throttled = null;
  if (args) {
    if (args.nextStartKey !== undefined) {
      this.nextStartKey = args.nextStartKey;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
    if (args.throttled !== undefined) {
      this.throttled = args.throttled;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size304 = 0;
        var _rtmp3308;
        this.nextStartKey = {};
        var _ktype305 = 0;
        var _vtype306 = 0;
        _rtmp3308 = input.readMapBegin();
        _ktype305 = _rtmp3308.ktype;
        _vtype306 = _rtmp3308.vtype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var key310 = null;
          var val311 = null;
          key310 = input.readString();
          val311 = new ttypes.Datum();
          val311.read(input);
          this.nextStartKey[key310] = val311;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.records = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          var _size319 = 0;
          var _rtmp3323;
          elem318 = {};
          var _ktype320 = 0;
          var _vtype321 = 0;
          _rtmp3323 = input.readMapBegin();
          _ktype320 = _rtmp3323.ktype;
          _vtype321 = _rtmp3323.vtype;
          _size319 = _rtmp3323.size;
          for (var _i324 = 0; _i324 < _size319; ++_i324)
          {
            var key325 = null;
            var val326 = null;
            key325 = input.readString();
            val326 = new ttypes.Datum();
            val326.read(input);
            elem318[key325] = val326;
          }
          input.readMapEnd();
          this.records.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.throttled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.nextStartKey !== null && this.nextStartKey !== undefined) {
    output.writeFieldBegin('nextStartKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nextStartKey));
    for (var kiter327 in this.nextStartKey)
    {
      if (this.nextStartKey.hasOwnProperty(kiter327))
      {
        var viter328 = this.nextStartKey[kiter327];
        output.writeString(kiter327);
        viter328.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.MAP, this.records.length);
    for (var iter329 in this.records)
    {
      if (this.records.hasOwnProperty(iter329))
      {
        iter329 = this.records[iter329];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(iter329));
        for (var kiter330 in iter329)
        {
          if (iter329.hasOwnProperty(kiter330))
          {
            var viter331 = iter329[kiter330];
            output.writeString(kiter330);
            viter331.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throttled !== null && this.throttled !== undefined) {
    output.writeFieldBegin('throttled', Thrift.Type.BOOL, 3);
    output.writeBool(this.throttled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequestItem = module.exports.BatchRequestItem = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
BatchRequestItem.prototype = {};
BatchRequestItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequestItem.prototype.write = function(output) {
  output.writeStructBegin('BatchRequestItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.getResult = null;
  this.putResult = null;
  this.incrementResult = null;
  this.removeResult = null;
  if (args) {
    if (args.getResult !== undefined) {
      this.getResult = args.getResult;
    }
    if (args.putResult !== undefined) {
      this.putResult = args.putResult;
    }
    if (args.incrementResult !== undefined) {
      this.incrementResult = args.incrementResult;
    }
    if (args.removeResult !== undefined) {
      this.removeResult = args.removeResult;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getResult = new ttypes.GetResult();
        this.getResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putResult = new ttypes.PutResult();
        this.putResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementResult = new ttypes.IncrementResult();
        this.incrementResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeResult = new ttypes.RemoveResult();
        this.removeResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.getResult !== null && this.getResult !== undefined) {
    output.writeFieldBegin('getResult', Thrift.Type.STRUCT, 1);
    this.getResult.write(output);
    output.writeFieldEnd();
  }
  if (this.putResult !== null && this.putResult !== undefined) {
    output.writeFieldBegin('putResult', Thrift.Type.STRUCT, 2);
    this.putResult.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementResult !== null && this.incrementResult !== undefined) {
    output.writeFieldBegin('incrementResult', Thrift.Type.STRUCT, 3);
    this.incrementResult.write(output);
    output.writeFieldEnd();
  }
  if (this.removeResult !== null && this.removeResult !== undefined) {
    output.writeFieldBegin('removeResult', Thrift.Type.STRUCT, 4);
    this.removeResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResultItem = module.exports.BatchResultItem = function(args) {
  this.action = null;
  this.success = null;
  this.result = null;
  this.serviceException = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.serviceException = args;
    return;
  }
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.serviceException !== undefined) {
      this.serviceException = args.serviceException;
    }
  }
};
BatchResultItem.prototype = {};
BatchResultItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceException = new Errors_ttypes.ServiceException();
        this.serviceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResultItem.prototype.write = function(output) {
  output.writeStructBegin('BatchResultItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 3);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceException !== null && this.serviceException !== undefined) {
    output.writeFieldBegin('serviceException', Thrift.Type.STRUCT, 4);
    this.serviceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequest = module.exports.BatchRequest = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchRequest.prototype = {};
BatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size332 = 0;
        var _rtmp3336;
        this.items = [];
        var _etype335 = 0;
        _rtmp3336 = input.readListBegin();
        _etype335 = _rtmp3336.etype;
        _size332 = _rtmp3336.size;
        for (var _i337 = 0; _i337 < _size332; ++_i337)
        {
          var elem338 = null;
          elem338 = new ttypes.BatchRequestItem();
          elem338.read(input);
          this.items.push(elem338);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequest.prototype.write = function(output) {
  output.writeStructBegin('BatchRequest');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter339 in this.items)
    {
      if (this.items.hasOwnProperty(iter339))
      {
        iter339 = this.items[iter339];
        iter339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResult = module.exports.BatchResult = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchResult.prototype = {};
BatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.items = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new ttypes.BatchResultItem();
          elem346.read(input);
          this.items.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResult.prototype.write = function(output) {
  output.writeStructBegin('BatchResult');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter347 in this.items)
    {
      if (this.items.hasOwnProperty(iter347))
      {
        iter347 = this.items[iter347];
        iter347.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InternalMutationLogEntry = module.exports.InternalMutationLogEntry = function(args) {
  this.record = null;
  this.type = null;
  this.rowDeleted = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
  }
};
InternalMutationLogEntry.prototype = {};
InternalMutationLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size348 = 0;
        var _rtmp3352;
        this.record = {};
        var _ktype349 = 0;
        var _vtype350 = 0;
        _rtmp3352 = input.readMapBegin();
        _ktype349 = _rtmp3352.ktype;
        _vtype350 = _rtmp3352.vtype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var key354 = null;
          var val355 = null;
          key354 = input.readString();
          val355 = input.readBinary();
          this.record[key354] = val355;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternalMutationLogEntry.prototype.write = function(output) {
  output.writeStructBegin('InternalMutationLogEntry');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.record));
    for (var kiter356 in this.record)
    {
      if (this.record.hasOwnProperty(kiter356))
      {
        var viter357 = this.record[kiter356];
        output.writeString(kiter356);
        output.writeBinary(viter357);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MutationLogEntry = module.exports.MutationLogEntry = function(args) {
  this.record = null;
  this.type = null;
  this.rowDeleted = null;
  this.timestamp = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
MutationLogEntry.prototype = {};
MutationLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size358 = 0;
        var _rtmp3362;
        this.record = {};
        var _ktype359 = 0;
        var _vtype360 = 0;
        _rtmp3362 = input.readMapBegin();
        _ktype359 = _rtmp3362.ktype;
        _vtype360 = _rtmp3362.vtype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var key364 = null;
          var val365 = null;
          key364 = input.readString();
          val365 = new ttypes.Datum();
          val365.read(input);
          this.record[key364] = val365;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogEntry.prototype.write = function(output) {
  output.writeStructBegin('MutationLogEntry');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter366 in this.record)
    {
      if (this.record.hasOwnProperty(kiter366))
      {
        var viter367 = this.record[kiter366];
        output.writeString(kiter366);
        viter367.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecordImage = module.exports.RecordImage = function(args) {
  this.record = null;
  this.rowDeleted = null;
  this.timestamp = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
RecordImage.prototype = {};
RecordImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size368 = 0;
        var _rtmp3372;
        this.record = {};
        var _ktype369 = 0;
        var _vtype370 = 0;
        _rtmp3372 = input.readMapBegin();
        _ktype369 = _rtmp3372.ktype;
        _vtype370 = _rtmp3372.vtype;
        _size368 = _rtmp3372.size;
        for (var _i373 = 0; _i373 < _size368; ++_i373)
        {
          var key374 = null;
          var val375 = null;
          key374 = input.readString();
          val375 = new ttypes.Datum();
          val375.read(input);
          this.record[key374] = val375;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordImage.prototype.write = function(output) {
  output.writeStructBegin('RecordImage');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter376 in this.record)
    {
      if (this.record.hasOwnProperty(kiter376))
      {
        var viter377 = this.record[kiter376];
        output.writeString(kiter376);
        viter377.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 2);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

